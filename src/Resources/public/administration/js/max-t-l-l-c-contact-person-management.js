!function(){var t={93:function(){},894:function(t,e,n){var s=n(93);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[t.id,s,""]]),s.locals&&(t.exports=s.locals),(0,n(534).A)("1ba02e2a",s,!0,{})},534:function(t,e,n){"use strict";function s(t,e){for(var n=[],s={},o=0;o<e.length;o++){var a=e[o],i=a[0],r={id:t+":"+o,css:a[1],media:a[2],sourceMap:a[3]};s[i]?s[i].parts.push(r):n.push(s[i]={id:i,parts:[r]})}return n}n.d(e,{A:function(){return g}});var o,a="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!a)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var i={},r=a&&(document.head||document.getElementsByTagName("head")[0]),c=null,l=0,m=!1,d=function(){},p=null,u="data-vue-ssr-id",h="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function g(t,e,n,o){m=n,p=o||{};var a=s(t,e);return w(a),function(e){for(var n=[],o=0;o<a.length;o++){var r=i[a[o].id];r.refs--,n.push(r)}e?w(a=s(t,e)):a=[];for(var o=0;o<n.length;o++){var r=n[o];if(0===r.refs){for(var c=0;c<r.parts.length;c++)r.parts[c]();delete i[r.id]}}}}function w(t){for(var e=0;e<t.length;e++){var n=t[e],s=i[n.id];if(s){s.refs++;for(var o=0;o<s.parts.length;o++)s.parts[o](n.parts[o]);for(;o<n.parts.length;o++)s.parts.push(P(n.parts[o]));s.parts.length>n.parts.length&&(s.parts.length=n.parts.length)}else{for(var a=[],o=0;o<n.parts.length;o++)a.push(P(n.parts[o]));i[n.id]={id:n.id,refs:1,parts:a}}}}function f(){var t=document.createElement("style");return t.type="text/css",r.appendChild(t),t}function P(t){var e,n,s=document.querySelector("style["+u+'~="'+t.id+'"]');if(s){if(m)return d;s.parentNode.removeChild(s)}if(h){var o=l++;e=C.bind(null,s=c||(c=f()),o,!1),n=C.bind(null,s,o,!0)}else e=b.bind(null,s=f()),n=function(){s.parentNode.removeChild(s)};return e(t),function(s){s?(s.css!==t.css||s.media!==t.media||s.sourceMap!==t.sourceMap)&&e(t=s):n()}}var v=(o=[],function(t,e){return o[t]=e,o.filter(Boolean).join("\n")});function C(t,e,n,s){var o=n?"":s.css;if(t.styleSheet)t.styleSheet.cssText=v(e,o);else{var a=document.createTextNode(o),i=t.childNodes;i[e]&&t.removeChild(i[e]),i.length?t.insertBefore(a,i[e]):t.appendChild(a)}}function b(t,e){var n=e.css,s=e.media,o=e.sourceMap;if(s&&t.setAttribute("media",s),p.ssrId&&t.setAttribute(u,e.id),o&&(n+="\n/*# sourceURL="+o.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},e={};function n(s){var o=e[s];if(void 0!==o)return o.exports;var a=e[s]={id:s,exports:{}};return t[s](a,a.exports,n),a.exports}n.d=function(t,e){for(var s in e)n.o(e,s)&&!n.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="bundles/maxtllccontactpersonmanagement/",window?.__sw__?.assetPath&&(n.p=window.__sw__.assetPath+"/bundles/maxtllccontactpersonmanagement/"),function(){"use strict";let{Component:t,Mixin:e}=Shopware,{Criteria:s}=Shopware.Data;t.register("contact-person-list",{template:'\n<sw-page class="contact-person-list">\n    <template #smart-bar-header>\n        <h2>\n            {{ $t(\'contact-person.list.textContactPersonOverview\') }}\n        </h2>\n    </template>\n\n    <template #smart-bar-actions>\n        <sw-button :routerLink="{ name: \'contact.person.create\' }" variant="primary">\n            {{ $t(\'contact-person.list.buttonAddContactPerson\') }}\n        </sw-button>\n    </template>\n\n    <template #content>\n        <div class="contact-person-list__content">\n            <sw-entity-listing\n                v-if="contactPersons"\n                :repository="repository"\n                :items="contactPersons"\n                :columns="contactPersonColumns"\n                :fullPage="true"\n                :showSettings="true"\n                :showSelection="false"\n                :allowInlineEdit="false"\n                :allowView="true"\n                :allowEdit="true"\n                :allowDelete="true"\n                :isLoading="isLoading"\n                identifier="contact-person-list"\n                @page-change="onPageChange"\n                @column-sort="onSortColumn"\n                @inline-edit-save="onInlineEditSave"\n                @delete-item="onDelete">\n\n                <template #column-active="{ item }">\n                    <div style="text-align: center;">\n                        \n                        <sw-icon\n                            v-if="item.active === true"\n                            name="regular-checkmark"\n                            size="16px"\n                            style="color: #37d046;">\n                        </sw-icon>\n                        <sw-icon\n                            v-else\n                            name="regular-times"\n                            size="16px"\n                            style="color: #de294c;">\n                        </sw-icon>\n                    </div>\n                </template>\n\n                <template #column-customer.firstName="{ item }">\n                    <router-link\n                        v-if="item.customer"\n                        :to="{ name: \'sw.customer.detail\', params: { id: item.customer.id } }"\n                        class="sw-entity-listing__link">\n                        {{ item.customer.firstName }} {{ item.customer.lastName }}\n                    </router-link>\n                    <span v-else>-</span>\n                </template>\n\n                <template #actions="{ item }">\n                    <sw-context-menu-item\n                        :routerLink="{ name: \'contact.person.detail\', params: { id: item.id } }">\n                        {{ $t(\'contact-person.list.contextMenuEdit\') }}\n                    </sw-context-menu-item>\n\n                    <sw-context-menu-item\n                        @click="onDelete(item.id)"\n                        class="sw-context-menu-item--danger">\n                        {{ $t(\'contact-person.list.contextMenuDelete\') }}\n                    </sw-context-menu-item>\n                </template>\n\n                <template #action-modals="{ item }">\n                    <sw-modal\n                        v-if="showDeleteModal === item.id"\n                        @modal-close="onCloseDeleteModal"\n                        :title="$t(\'global.default.warning\')"\n                        variant="small">\n                        <p class="sw-contact-person-list__confirm-delete-text">\n                            {{ $t(\'contact-person.list.textDeleteConfirm\', 0, { name: `${item.firstName} ${item.lastName}` }) }}\n                        </p>\n\n                        <template #modal-footer>\n                            <sw-button @click="onCloseDeleteModal" size="small">\n                                {{ $t(\'global.default.cancel\') }}\n                                </sw-button>\n\n                                <sw-button @click="onConfirmDelete(item.id)" variant="danger" size="small">\n                                {{ $t(\'global.default.delete\') }}\n                            </sw-button>\n                        </template>\n                    </sw-modal>\n                </template>\n            </sw-entity-listing>\n\n            <sw-loader v-if="isLoading && !contactPersons"></sw-loader>\n\n            <sw-empty-state\n                v-else-if="!isLoading && (!contactPersons || contactPersons.length === 0)"\n                :title="$t(\'contact-person.list.emptyStateTitle\')"\n                :subline="$t(\'contact-person.list.emptyStateSubline\')"\n                icon="default-identity-card">\n                <template #actions>\n                    <sw-button\n                        variant="primary"\n                        :routerLink="{ name: \'contact.person.create\' }">\n                        {{ $t(\'contact-person.list.buttonAddContactPerson\') }}\n                    </sw-button>\n                </template>\n            </sw-empty-state>\n        </div>\n    </template>\n</sw-page>',inject:["repositoryFactory"],mixins:[e.getByName("listing"),e.getByName("notification")],data(){return{repository:null,contactPersons:null,isLoading:!0,sortBy:"firstName",sortDirection:"ASC",naturalSorting:!0,showDeleteModal:!1,total:0}},metaInfo(){return{title:this.$createTitle()}},computed:{contactPersonColumns(){return[{property:"firstName",dataIndex:"firstName",label:this.$t("contact-person.list.columnFirstName"),routerLink:"contact.person.detail",allowResize:!0,primary:!0},{property:"lastName",dataIndex:"lastName",label:this.$t("contact-person.list.columnLastName"),allowResize:!0},{property:"email",dataIndex:"email",label:this.$t("contact-person.list.columnEmail"),allowResize:!0},{property:"phone",dataIndex:"phone",label:this.$t("contact-person.list.columnPhone"),allowResize:!0},{property:"customer.customerNumber",dataIndex:"customer.customerNumber",label:this.$t("contact-person.list.columnCustomerNumber"),allowResize:!0},{property:"customer.firstName",dataIndex:"customer.firstName,customer.lastName",label:this.$t("contact-person.list.columnCustomerName"),allowResize:!0},{property:"active",dataIndex:"active",label:this.$t("contact-person.list.columnActive"),allowResize:!0,align:"center",width:"100px"}]}},created(){this.repository=this.repositoryFactory.create("maxtllc_contact_person"),this.getList()},methods:{getList(){this.isLoading=!0;let t=new s(this.page,this.limit);t.addAssociation("customer"),this.term&&t.setTerm(this.term),t.addSorting(s.sort(this.sortBy,this.sortDirection,this.naturalSorting)),this.repository.search(t,Shopware.Context.api).then(t=>{this.contactPersons=t,this.total=t.total,this.isLoading=!1}).catch(t=>{console.error("Error loading contact persons:",t),this.isLoading=!1,this.createNotificationError({title:"Error",message:"Failed to load contact persons"})})},onChangeLanguage(){this.getList()},onDelete(t){this.showDeleteModal=t},onCloseDeleteModal(){this.showDeleteModal=!1},onConfirmDelete(t){return this.showDeleteModal=!1,this.repository.delete(t,Shopware.Context.api).then(()=>{this.getList(),this.createNotificationSuccess({title:"Success",message:"Contact person deleted successfully"})}).catch(t=>{console.error("Error deleting contact person:",t),this.createNotificationError({title:"Error",message:"Failed to delete contact person"})})},onPageChange(t){this.page=t.page,this.limit=t.limit,this.getList()},onSortColumn(t){this.sortBy=t.sortBy,this.sortDirection=t.sortDirection,this.naturalSorting=t.naturalSorting,this.getList()},onRefresh(){this.getList()},getContactPersonColumns(){return this.contactPersonColumns}}});let{Component:o,Mixin:a}=Shopware,{Criteria:i}=Shopware.Data;o.register("contact-person-detail",{template:'\n<sw-page class="contact-person-detail">\n    <template #smart-bar-header>\n        <h2>\n            {{ identifier || $t(\'contact-person.detail.textContactPersonDetail\') }}\n        </h2>\n    </template>\n\n    <template #smart-bar-actions>\n        <sw-button-group>\n            <sw-button @click="onCancel">\n                {{ $t(\'contact-person.detail.buttonCancel\') }}\n            </sw-button>\n\n            <sw-button\n                variant="primary"\n                :isLoading="isLoading"\n                @click="onClickSave">\n                {{ $t(\'contact-person.detail.buttonSave\') }}\n            </sw-button>\n        </sw-button-group>\n    </template>\n\n    <template #content>\n        <sw-card-view>\n            <sw-card\n                :title="$t(\'contact-person.detail.cardTitleContactPersonInfo\')"\n                :isLoading="isLoading">\n\n                <template v-if="contactPerson">\n                    <sw-container columns="repeat(auto-fit, minmax(250px, 1fr))" gap="0px 30px">\n                        <sw-text-field\n                            v-model:value="contactPerson.firstName"\n                            :label="$t(\'contact-person.detail.labelFirstName\')"\n                            :placeholder="$t(\'contact-person.detail.placeholderFirstName\')"\n                            required>\n                        </sw-text-field>\n\n                        <sw-text-field\n                            v-model:value="contactPerson.lastName"\n                            :label="$t(\'contact-person.detail.labelLastName\')"\n                            :placeholder="$t(\'contact-person.detail.placeholderLastName\')"\n                            required>\n                        </sw-text-field>\n\n                        <sw-text-field\n                            v-model:value="contactPerson.email"\n                            :label="$t(\'contact-person.detail.labelEmail\')"\n                            :placeholder="$t(\'contact-person.detail.placeholderEmail\')"\n                            required>\n                        </sw-text-field>\n\n                        <sw-text-field\n                            v-model:value="contactPerson.phone"\n                            :label="$t(\'contact-person.detail.labelPhone\')"\n                            :placeholder="$t(\'contact-person.detail.placeholderPhone\')">\n                        </sw-text-field>\n\n                        \n                        <sw-text-field\n                            :value="customerDisplayName"\n                            :label="$t(\'contact-person.detail.labelCustomer\')"\n                            :disabled="true"\n                            :helpText="$t(\'contact-person.detail.customerEditHelpText\')">\n                            <template #suffix>\n                                <sw-icon\n                                    v-if="contactPerson.customer"\n                                    name="default-action-external-link"\n                                    size="16px"\n                                    @click="openCustomerDetails"\n                                    style="cursor: pointer;">\n                                </sw-icon>\n                            </template>\n                        </sw-text-field>\n\n                        <sw-switch-field\n                            v-model:value="contactPerson.active"\n                            :label="$t(\'contact-person.detail.labelActive\')">\n                        </sw-switch-field>\n                    </sw-container>\n                </template>\n\n                <sw-loader v-else></sw-loader>\n            </sw-card>\n        </sw-card-view>\n    </template>\n\n    <template #sidebar>\n        <sw-sidebar>\n            <sw-sidebar-item\n                icon="default-arrow-360-left"\n                :title="$t(\'contact-person.detail.backToList\')"\n                @click="onCancel">\n            </sw-sidebar-item>\n\n            \n            <sw-sidebar-item\n                v-if="contactPerson && contactPerson.customer"\n                icon="default-avatar-single"\n                :title="$t(\'contact-person.detail.viewCustomer\')"\n                @click="openCustomerDetails">\n            </sw-sidebar-item>\n        </sw-sidebar>\n    </template>\n</sw-page>',inject:["repositoryFactory"],mixins:[a.getByName("notification"),a.getByName("placeholder")],data(){return{contactPerson:null,isLoading:!1,processSuccess:!1,repository:null,customerRepository:null}},metaInfo(){return{title:this.$createTitle(this.identifier)}},computed:{identifier(){return this.contactPerson?.firstName&&this.contactPerson?.lastName?`${this.contactPerson.firstName} ${this.contactPerson.lastName}`:""},contactPersonId(){return this.$route.params.id},customerCriteria(){let t=new i;return t.addSorting(i.sort("firstName","ASC")),t},customerDisplayName(){if(!this.contactPerson?.customer)return this.$t("contact-person.detail.noCustomerAssigned");let t=this.contactPerson.customer;return`${t.customerNumber} - ${t.firstName} ${t.lastName}`}},created(){this.repository=this.repositoryFactory.create("maxtllc_contact_person"),this.customerRepository=this.repositoryFactory.create("customer"),this.getContactPerson()},methods:{getContactPerson(){this.isLoading=!0;let t=new i;t.addAssociation("customer"),this.repository.get(this.contactPersonId,Shopware.Context.api,t).then(t=>{this.contactPerson=t,this.isLoading=!1}).catch(()=>{this.isLoading=!1,this.createNotificationError({title:"Error",message:"Contact person not found"}),this.$router.push({name:"contact.person.list"})})},onClickSave(){let t=this.contactPerson.firstName?.trim(),e=this.contactPerson.lastName?.trim(),n=this.contactPerson.email?.trim();if(!t||!e||!n){this.createNotificationError({title:this.$t("contact-person.detail.errorTitle"),message:"Please fill in all required fields: First Name, Last Name, and Email"});return}if(!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(n)){this.createNotificationError({title:this.$t("contact-person.detail.errorTitle"),message:"Please enter a valid email address"});return}this.isLoading=!0,this.repository.save(this.contactPerson,Shopware.Context.api).then(()=>{this.isLoading=!1,this.getContactPerson(),this.createNotificationSuccess({title:this.$t("contact-person.detail.successTitle"),message:this.$t("contact-person.detail.successMessage")})}).catch(t=>{this.isLoading=!1,console.error("Error saving contact person:",t),this.createNotificationError({title:this.$t("contact-person.detail.errorTitle"),message:t.message||"Failed to save contact person"})})},onCancel(){this.$router.push({name:"contact.person.list"})},openCustomerDetails(){this.contactPerson?.customer?.id&&this.$router.push({name:"sw.customer.detail",params:{id:this.contactPerson.customer.id}})}}});let{Component:r,Mixin:c}=Shopware;r.register("contact-person-create",{template:'\n<sw-page class="contact-person-create">\n    <template #smart-bar-header>\n        <h2>\n            {{ $t(\'contact-person.detail.textCreateNewContactPerson\') }}\n        </h2>\n    </template>\n\n    <template #smart-bar-actions>\n        <sw-button-group>\n            <sw-button @click="onCancel">\n                {{ $t(\'contact-person.detail.buttonCancel\') }}\n            </sw-button>\n\n            <sw-button\n                variant="primary"\n                :isLoading="isLoading"\n                @click="onClickSave">\n                {{ $t(\'contact-person.detail.buttonCreate\') }}\n            </sw-button>\n        </sw-button-group>\n    </template>\n\n    <template #content>\n        <sw-card-view>\n            <sw-card\n                :title="$t(\'contact-person.detail.cardTitleContactPersonInfo\')"\n                :isLoading="isLoading">\n\n                <template v-if="contactPerson">\n                    <sw-container columns="repeat(auto-fit, minmax(250px, 1fr))" gap="0px 30px">\n                        <sw-text-field\n                            v-model:value="contactPerson.firstName"\n                            :label="$t(\'contact-person.detail.labelFirstName\')"\n                            :placeholder="$t(\'contact-person.detail.placeholderFirstName\')"\n                            required>\n                        </sw-text-field>\n\n                        <sw-text-field\n                            v-model:value="contactPerson.lastName"\n                            :label="$t(\'contact-person.detail.labelLastName\')"\n                            :placeholder="$t(\'contact-person.detail.placeholderLastName\')"\n                            required>\n                        </sw-text-field>\n\n                        <sw-text-field\n                            v-model:value="contactPerson.email"\n                            :label="$t(\'contact-person.detail.labelEmail\')"\n                            :placeholder="$t(\'contact-person.detail.placeholderEmail\')"\n                            required>\n                        </sw-text-field>\n\n                        <sw-text-field\n                            v-model:value="contactPerson.phone"\n                            :label="$t(\'contact-person.detail.labelPhone\')"\n                            :placeholder="$t(\'contact-person.detail.placeholderPhone\')">\n                        </sw-text-field>\n\n                        <sw-switch-field\n                            v-model:value="contactPerson.active"\n                            :label="$t(\'contact-person.detail.labelActive\')">\n                        </sw-switch-field>\n                    </sw-container>\n                </template>\n\n                <sw-loader v-else></sw-loader>\n            </sw-card>\n        </sw-card-view>\n    </template>\n\n    <template #sidebar>\n        <sw-sidebar-item\n            icon="default-arrow-360-left"\n            :title="$t(\'contact-person.detail.backToList\')"\n            @click="onCancel">\n        </sw-sidebar-item>\n    </template>\n</sw-page>',inject:["repositoryFactory"],mixins:[c.getByName("notification")],data(){return{contactPerson:null,isLoading:!1,processSuccess:!1,repository:null}},metaInfo(){return{title:this.$createTitle()}},computed:{},created(){this.repository=this.repositoryFactory.create("maxtllc_contact_person"),this.getContactPerson()},methods:{getContactPerson(){this.contactPerson=this.repository.create(Shopware.Context.api),this.contactPerson.firstName="",this.contactPerson.lastName="",this.contactPerson.email="",this.contactPerson.phone="",this.contactPerson.active=!0,console.log("Created contact person:",this.contactPerson)},onClickSave(){let t=this.contactPerson.firstName?.trim(),e=this.contactPerson.lastName?.trim(),n=this.contactPerson.email?.trim();if(!t||!e||!n){this.createNotificationError({title:this.$t("contact-person.detail.errorTitle"),message:"Please fill in all required fields: First Name, Last Name, and Email"});return}if(!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(n)){this.createNotificationError({title:this.$t("contact-person.detail.errorTitle"),message:"Please enter a valid email address"});return}this.isLoading=!0,console.log("Saving contact person:",{firstName:t,lastName:e,email:n,phone:this.contactPerson.phone,active:this.contactPerson.active}),this.repository.save(this.contactPerson,Shopware.Context.api).then(()=>{this.isLoading=!1,this.createNotificationSuccess({title:this.$t("contact-person.detail.successTitle"),message:this.$t("contact-person.detail.successMessage")}),this.$router.push({name:"contact.person.detail",params:{id:this.contactPerson.id}})}).catch(t=>{this.isLoading=!1,console.error("Error saving contact person:",t),this.createNotificationError({title:this.$t("contact-person.detail.errorTitle"),message:t.message||"Failed to save contact person"})})},onCancel(){this.$router.push({name:"contact.person.list"})}}});let{Module:l}=Shopware;l.register("contact-person",{type:"plugin",name:"contact-person",title:"contact-person.general.mainMenuItemGeneral",description:"contact-person.general.descriptionTextModule",color:"#ff3d58",icon:"default-identity-card",routes:{list:{component:"contact-person-list",path:"list",meta:{privilege:"contact_person:read"}},detail:{component:"contact-person-detail",path:"detail/:id?",meta:{parentPath:"contact.person.list",privilege:"contact_person:read"}},create:{component:"contact-person-create",path:"create",meta:{parentPath:"contact.person.list",privilege:"contact_person:create"}}},navigation:[{label:"contact-person.general.mainMenuItemGeneral",color:"#ff3d58",path:"contact.person.list",icon:"default-identity-card",parent:"sw-customer",position:100,privilege:"contact_person:read"}]}),Shopware.Component.override("sw-customer-detail",{template:"\n\n{% block sw_customer_detail_content_tab_order %}\n    {# This parent is very important as you don't want to override the order tab completely #}\n    {% parent %}\n\n    \n    <sw-tabs-item\n        :route=\"{ name: 'sw.customer.detail.contactPersons', params: { id: $route.params.id } }\"\n        :title=\"$tc('sw-customer.contactPerson.tabTitle') || 'Contact Persons'\">\n        {{ $tc('sw-customer.contactPerson.tabTitle') || 'Contact Persons' }}\n    </sw-tabs-item>\n{% endblock %}"}),n(894);let{Component:m,Mixin:d}=Shopware,{Criteria:p}=Shopware.Data;Shopware.Component.register("sw-customer-detail-contact-persons",{template:'\n<sw-card\n    :title="$tc(\'sw-customer.contactPerson.cardTitle\')"\n    :isLoading="contactPersonsLoading"\n    class="sw-customer-detail-contact-persons">\n\n    \n    <template #toolbar>\n        <sw-button\n            variant="primary"\n            size="small"\n            :disabled="!hasValidCustomer"\n            @click="onAssignContactPersons">\n            {{ $tc(\'sw-customer.contactPerson.buttonAssign\') }}\n        </sw-button>\n\n        <sw-button\n            variant="ghost"\n            size="small"\n            :routerLink="{ name: \'contact.person.list\' }">\n            {{ $tc(\'sw-customer.contactPerson.buttonManageAll\') }}\n        </sw-button>\n    </template>\n\n    \n    <template v-if="!hasValidCustomer">\n        <sw-empty-state\n            :title="$tc(\'sw-customer.contactPerson.noCustomerTitle\')"\n            :subline="$tc(\'sw-customer.contactPerson.noCustomerSubline\')"\n            icon="default-identity-card">\n        </sw-empty-state>\n    </template>\n\n    <template v-else-if="assignedContactPersons && assignedContactPersons.length > 0">\n        \n        <sw-data-grid\n            :dataSource="assignedContactPersons"\n            :columns="contactPersonColumns"\n            :showSelection="false"\n            :showActions="true"\n            :isLoading="contactPersonsLoading"\n            identifier="sw-customer-assigned-contact-person-grid">\n\n            <template #column-active="{ item }">\n                <sw-icon\n                    v-if="item.active"\n                    name="small-default-checkmark-line-medium"\n                    small\n                    class="is--active">\n                </sw-icon>\n                <sw-icon\n                    v-else\n                    name="small-default-x-line-medium"\n                    small\n                    class="is--inactive">\n                </sw-icon>\n            </template>\n\n            <template #actions="{ item }">\n                <sw-context-menu-item @click="onEditContactPerson(item)">\n                    {{ $tc(\'sw-customer.contactPerson.contextMenuEdit\') }}\n                </sw-context-menu-item>\n\n                <sw-context-menu-item\n                    @click="onRemoveAssignment(item.id)"\n                    class="sw-context-menu-item--danger">\n                    {{ $tc(\'sw-customer.contactPerson.contextMenuRemoveAssignment\') }}\n                </sw-context-menu-item>\n            </template>\n        </sw-data-grid>\n    </template>\n\n    <template v-else-if="hasValidCustomer && !contactPersonsLoading">\n        <sw-empty-state\n            :title="$tc(\'sw-customer.contactPerson.emptyStateTitle\')"\n            :subline="$tc(\'sw-customer.contactPerson.emptyStateSubline\')"\n            icon="default-identity-card">\n        </sw-empty-state>\n    </template>\n</sw-card>\n\n\n<sw-modal\n    v-if="showAssignmentModal"\n    :title="$tc(\'sw-customer.contactPerson.modalTitleAssign\')"\n    @modal-close="onCloseAssignmentModal"\n    size="large"\n    class="sw-customer-contact-assignment-modal">\n\n    \n    <template v-if="availableContactPersons && availableContactPersons.length > 0">\n        <p>{{ $tc(\'sw-customer.contactPerson.assignmentDescription\') }}</p>\n\n        <div class="sw-customer-contact-assignment__customer-info">\n            <strong>Customer:</strong> {{ customer.firstName }} {{ customer.lastName }}\n            <span v-if="customer.customerNumber">({{ customer.customerNumber }})</span>\n        </div>\n\n        \n        <sw-data-grid\n            :dataSource="availableContactPersons"\n            :columns="contactPersonColumns"\n            :showSelection="true"\n            :showActions="false"\n            :fullPage="false"\n            :showPagination="true"\n            :limit="10"\n            @selection-change="onSelectionChange"\n            identifier="sw-customer-contact-assignment-grid">\n\n            <template #column-active="{ item }">\n                <sw-icon\n                    v-if="item.active"\n                    name="small-default-checkmark-line-medium"\n                    small\n                    class="is--active">\n                </sw-icon>\n                <sw-icon\n                    v-else\n                    name="small-default-x-line-medium"\n                    small\n                    class="is--inactive">\n                </sw-icon>\n            </template>\n        </sw-data-grid>\n\n        <div v-if="hasSelectedContactPersons" class="sw-customer-contact-assignment__selection-info">\n            <p><strong>{{ selectedContactPersons.length }}</strong> contact person(s) selected for assignment</p>\n        </div>\n    </template>\n\n    <template v-else>\n        <sw-empty-state\n            :title="$tc(\'sw-customer.contactPerson.noAvailableTitle\')"\n            :subline="$tc(\'sw-customer.contactPerson.noAvailableSubline\')"\n            icon="default-identity-card">\n            <template #actions>\n                <sw-button\n                    variant="primary"\n                    :routerLink="{ name: \'contact.person.create\' }"\n                    @click="onCloseAssignmentModal">\n                    {{ $tc(\'sw-customer.contactPerson.buttonCreateNew\') }}\n                </sw-button>\n            </template>\n        </sw-empty-state>\n    </template>\n\n    \n    <template #modal-footer>\n        <sw-button @click="onCloseAssignmentModal" size="small">\n            {{ $tc(\'global.default.cancel\') }}\n        </sw-button>\n\n        <sw-button\n            v-if="availableContactPersons && availableContactPersons.length > 0"\n            variant="primary"\n            size="small"\n            :disabled="!hasSelectedContactPersons"\n            @click="onConfirmAssignment">\n            {{ $tc(\'sw-customer.contactPerson.buttonConfirmAssignment\') }}\n            <span v-if="hasSelectedContactPersons">({{ selectedContactPersons.length }})</span>\n        </sw-button>\n    </template>\n</sw-modal>',inject:["repositoryFactory"],mixins:[d.getByName("notification")],props:{customer:{type:Object,required:!0},customerEditMode:{type:Boolean,required:!1,default:!1}},data(){return{assignedContactPersons:null,availableContactPersons:null,contactPersonsLoading:!1,showAssignmentModal:!1,selectedContactPersons:[],selectedContactPersonsData:{}}},computed:{contactPersonRepository(){return this.repositoryFactory.create("maxtllc_contact_person")},hasValidCustomer(){return this.customer&&this.customer.id},assignedContactPersonCriteria(){let t=new p;return this.hasValidCustomer&&t.addFilter(p.equals("customerId",this.customer.id)),t.addSorting(p.sort("firstName","ASC")),t},availableContactPersonCriteria(){let t=new p;return t.addFilter(p.equals("customerId",null)),t.addSorting(p.sort("firstName","ASC")),t},contactPersonColumns(){return[{property:"firstName",dataIndex:"firstName",label:this.$tc("contact-person.list.columnFirstName")||"First Name",allowResize:!0,primary:!0},{property:"lastName",dataIndex:"lastName",label:this.$tc("contact-person.list.columnLastName")||"Last Name",allowResize:!0},{property:"email",dataIndex:"email",label:this.$tc("contact-person.list.columnEmail")||"Email",allowResize:!0},{property:"phone",dataIndex:"phone",label:this.$tc("contact-person.list.columnPhone")||"Phone",allowResize:!0},{property:"active",dataIndex:"active",label:this.$tc("contact-person.list.columnActive")||"Active",allowResize:!0}]},hasSelectedContactPersons(){return this.selectedContactPersons&&this.selectedContactPersons.length>0}},watch:{customer:{handler(t){t&&t.id&&this.loadAssignedContactPersons()},immediate:!0}},created(){this.hasValidCustomer&&this.loadAssignedContactPersons()},methods:{loadAssignedContactPersons(){if(!this.hasValidCustomer){this.assignedContactPersons=null;return}this.contactPersonsLoading||(this.contactPersonsLoading=!0,this.contactPersonRepository.search(this.assignedContactPersonCriteria,Shopware.Context.api).then(t=>{this.assignedContactPersons=t}).catch(t=>{console.error("Error loading assigned contact persons:",t),this.assignedContactPersons=[],this.createNotificationError({title:this.$tc("sw-customer.contactPerson.assignmentErrorTitle"),message:"Failed to load assigned contact persons"})}).finally(()=>{this.contactPersonsLoading=!1}))},loadAvailableContactPersons(){this.contactPersonRepository.search(this.availableContactPersonCriteria,Shopware.Context.api).then(t=>{this.availableContactPersons=t}).catch(t=>{console.error("Error loading available contact persons:",t),this.availableContactPersons=[]})},onAssignContactPersons(){if(!this.hasValidCustomer){this.createNotificationError({title:this.$tc("sw-customer.contactPerson.assignmentErrorTitle"),message:"No customer selected"});return}this.loadAvailableContactPersons(),this.selectedContactPersons=[],this.selectedContactPersonsData={},this.showAssignmentModal=!0},onCloseAssignmentModal(){this.showAssignmentModal=!1,this.selectedContactPersons=[],this.selectedContactPersonsData={},this.availableContactPersons=null},onSelectionChange(t,e){console.log("Selection change event:",{selection:t,selectionData:e}),Array.isArray(t)?this.selectedContactPersons=t:t&&"object"==typeof t?this.selectedContactPersons=Object.keys(t):this.selectedContactPersons=[],console.log("Processed selected contact persons:",this.selectedContactPersons)},onConfirmAssignment(){if(!this.hasSelectedContactPersons){this.createNotificationError({title:this.$tc("sw-customer.contactPerson.assignmentErrorTitle"),message:"Please select at least one contact person to assign"});return}console.log("Selected contact person IDs:",this.selectedContactPersons),console.log("Available contact persons collection:",this.availableContactPersons);let t=[];if(this.selectedContactPersons.forEach(e=>{let n=null;this.availableContactPersons.get?n=this.availableContactPersons.get(e):Array.isArray(this.availableContactPersons)?n=this.availableContactPersons.find(t=>t.id===e):this.availableContactPersons.data&&(n=this.availableContactPersons.data.find(t=>t.id===e)),n?t.push(n):console.warn("Could not find contact person with ID:",e)}),0===t.length){this.createNotificationError({title:this.$tc("sw-customer.contactPerson.assignmentErrorTitle"),message:this.$tc("sw-customer.contactPerson.assignmentErrorMessage")});return}console.log("Assigning contact persons:",t),Promise.all(t.map(t=>(t.customerId=this.customer.id,this.contactPersonRepository.save(t,Shopware.Context.api)))).then(()=>{this.onCloseAssignmentModal(),this.loadAssignedContactPersons(),this.createNotificationSuccess({title:this.$tc("sw-customer.contactPerson.assignmentSuccessTitle"),message:this.$tc("sw-customer.contactPerson.assignmentSuccessMessage")})}).catch(t=>{console.error("Error assigning contact persons:",t),this.createNotificationError({title:this.$tc("sw-customer.contactPerson.assignmentErrorTitle"),message:this.$tc("sw-customer.contactPerson.assignmentErrorMessage")})})},onRemoveAssignment(t){t&&confirm("Are you sure you want to remove this assignment?")&&this.contactPersonRepository.get(t,Shopware.Context.api).then(t=>(t.customerId=null,this.contactPersonRepository.save(t,Shopware.Context.api))).then(()=>{this.loadAssignedContactPersons(),this.createNotificationSuccess({title:this.$tc("sw-customer.contactPerson.removeAssignmentSuccessTitle"),message:this.$tc("sw-customer.contactPerson.removeAssignmentSuccessMessage")})}).catch(t=>{console.error("Error removing assignment:",t),this.createNotificationError({title:this.$tc("sw-customer.contactPerson.removeAssignmentErrorTitle"),message:this.$tc("sw-customer.contactPerson.removeAssignmentErrorMessage")})})},onEditContactPerson(t){this.$router.push({name:"contact.person.detail",params:{id:t.id}})},metaInfo(){return{title:this.$tc("sw-customer.contactPerson.tabTitle")}}}}),Shopware.Module.register("sw-customer-contact-persons-tab",{routeMiddleware(t,e){let n="sw.customer.detail.contactPersons";"sw.customer.detail"===e.name&&e.children.every(t=>t.name!==n)&&e.children.push({name:n,path:"/sw/customer/detail/:id/contactPersons",component:"sw-customer-detail-contact-persons",meta:{parentPath:"sw.customer.index"}}),t(e)}})}()}();